<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="NAOVisionServer" id="1" localization="8" tooltip="version 1.0" x="477" y="94">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1">
                                <BehaviorLayer name="Online Info">
                                    <BehaviorKeyframe name="OnlineInfo" index="1">
                                        <Diagram>
                                            <Box name="Stop" id="2" localization="8" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="351" y="40">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onInput_onStop(self):
        self.stopTimelineParent()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="OnlineInfo" id="3" localization="8" tooltip="by shiqishan" x="150" y="181">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        try:
            self.audio = ALProxy("ALAudioDevice")
        except :
            self.audio = ALProxy("ALAudioPlayer")
    def onLoad(self):
        self.bstart = True
        self.config = False
    def onUnload(self):
        self.bstart = False
        self.sock.close()
    def onInput_onStart(self):
        self.SendPort = self.getParameter("SendPort")
        self.RecvPort = self.getParameter("RecvPort")
        self.threadtime = self.getParameter("threadtime")
        self.memory.insertData("Selected",0)
        self.startSocket()
        while(self.bstart):
            try:
                self.msg,(self.addr, self.port) = self.sock.recvfrom( 20 )
                self.msg_unpack()
            except :
                self.logger.info("onlineInfo bug....")
                pass
    def onInput_onStop(self):
        self.onUnload()
    def startSocket(self):
        self.desc = ('<broadcast>',self.SendPort)
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,1)
        self.sock.bind( ('',self.RecvPort))
    def msg_unpack(self):
        if self.msg == "NVOnlineReq":
            self.sendOnlineMsg()
            self.logger.info("online send info...")
        elif self.msg == "ConfigON":
            #self.memory.insertData("Selected",1)
            self.output(1)
        elif self.msg == "ConfigOFF":
            #self.memory.insertData("Selected",0)
            self.output(0)
        else:
            pass

    def sendOnlineMsg(self):
        header = "NVOnlineRes"
        name = " "
        version = " "
        try:
            volume = self.audio.getOutputVolume()
            isRobotics = 1
        except:
            isRobotics = 0
        if(isRobotics == 1):
            try:
                info = self.motion.getStiffnesses("Body")
                stiffness = info[0]
            except :
                stiffness = 0
            try:
                system = ALProxy("ALSystem")
                name = system.robotName()
                version = system.systemVersion()
            except :
                pass

        else:
            stiffness = 0
        isSelected = self.memory.getData("Selected")
        robotInfo = struct.pack('!15s20s10s3h',header,name,version,isRobotics,stiffness,isSelected)
        self.sock.sendto(robotInfo,(self.addr, self.port))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="output" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="SendPort" inherits_from_parent="1" content_type="1" value="47381" default_value="47381" min="47381" max="47381" tooltip="" id="5" />
                                                <Parameter name="threadtime" inherits_from_parent="1" content_type="2" value="0.5" default_value="1" min="0" max="5" tooltip="" id="6" />
                                                <Parameter name="RecvPort" inherits_from_parent="0" content_type="1" value="47381" default_value="47381" min="47381" max="47381" tooltip="" id="7" />
                                            </Box>
                                            <Box name="GotoAction" id="1" localization="8" tooltip="Enter tooltip here" x="331" y="207">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def onLoad(self):
        pass
    def onUnload(self):
        pass
    def onInput_onStart(self, p):
        self.gotoState(20*p)
    def onInput_onStop(self):
        self.onUnload()
    def gotoState(self,p):
        try:
            self.getParentTimeline().goTo(p)
        except: # if NAOqi < 1.14
            self.gotoAndStopParent(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="ReqAndRes" mute="1">
                                    <BehaviorKeyframe name="ReqAndRes" index="1">
                                        <Diagram>
                                            <Box name="Behavior Cilent" id="1" localization="8" tooltip="Behavior Cilent by shiqishan" x="159" y="233">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
import vision_definitions
import base64
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")
        self.videoProxy= ALProxy("ALVideoDevice")
        self.threadtime = 0.2
    def onLoad(self):
        self.bstart = True
        self.baccept = True
        self.stifness_tem = 3
    def onUnload(self):
        self.bstart = False
        self.baccept = False
    def onInput_onStart(self):
        self.startSocket()
        cameraID = 0
        self.videoProxy.setParam(vision_definitions.kCameraSelectID,cameraID)
        subscriberID = self.videoProxy.subscribe("shiqishan", 0, 11, 5);
        self.threadtime = self.getParameter("threadtime")
        while(self.bstart):
            cliSock,(self.addr, self.port) = self.sock.accept()
            self.baccept = True
            self.logger.info("connect from...%s",self.addr)
            pieceSize = 1024
            while(self.baccept):
                try:
                    msg = cliSock.recv( 50 )
                    if msg == "NVImageRequest":
                        imageArr = self.videoProxy.getImageRemote(subscriberID)
                        image = imageArr[6]
                        self.logger.info("111111..111111")
                        cliSock.sendall(image)
                    elif msg == "NVImageClose":
                        self.logger.info("22222222222222")
                        cliSock.close()
                        break
                except:
                    self.logger.info("3333333333333")
                    cliSock.close()
                    break
    def onInput_onStop(self):
        self.onUnload()
        self.sock.close()
    def startSocket(self):
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.bind( ('',47383))
        self.sock.listen(5)
    def getString(self,p):
        string = []
        string = p.split('*|')
        if len(string)>0:
            return string[0]
        else:
            return ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="outputText" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="threadtime" inherits_from_parent="1" content_type="2" value="0.02" default_value="0.2" min="0" max="1" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Behavior Cilent" id="1" localization="8" tooltip="Behavior Cilent by shiqishan" x="169" y="83">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
import vision_definitions
import base64
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")
        self.videoProxy= ALProxy("ALVideoDevice")
        self.threadtime = 0.2
    def onLoad(self):
        self.bstart = True
        self.baccept = True
        self.stifness_tem = 3
    def onUnload(self):
        self.bstart = False
        self.baccept = False
    def onInput_onStart(self):
        self.startSocket()
        cameraID = 0
        self.videoProxy.setParam(vision_definitions.kCameraSelectID,cameraID)
        subscriberID = self.videoProxy.subscribe("shiqishan", 0, 11, 5);
        self.threadtime = self.getParameter("threadtime")
        while(self.bstart):
            try:
                msg,(self.addr, self.port) = self.sock.recvfrom( 50 )
                if msg == "NVImageRequest":
                    imageArr = self.videoProxy.getImageRemote(subscriberID)
                    image = imageArr[6]
                    self.logger.info("111111..%s",self.port)
                    size = 19200
                    i = 0
                    while i<=2:
                        self.sock.sendto(image[i*size:(i+1)*size],(self.addr, self.port))
                        i+=1

            except:
                self.logger.info("func bug....")
                pass
    def onInput_onStop(self):
        self.onUnload()
        self.sock.close()
    def startSocket(self):
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.bind( ('',47383))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="outputText" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="threadtime" inherits_from_parent="1" content_type="2" value="0.02" default_value="0.2" min="0" max="1" tooltip="" id="5" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
